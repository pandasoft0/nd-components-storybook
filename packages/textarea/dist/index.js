var qe=Object.create;var C=Object.defineProperty,Oe=Object.defineProperties,ke=Object.getOwnPropertyDescriptor,Se=Object.getOwnPropertyDescriptors,Ae=Object.getOwnPropertyNames,j=Object.getOwnPropertySymbols,Ie=Object.getPrototypeOf,L=Object.prototype.hasOwnProperty,ue=Object.prototype.propertyIsEnumerable;var ce=(e,r,t)=>r in e?C(e,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[r]=t,l=(e,r)=>{for(var t in r||(r={}))L.call(r,t)&&ce(e,t,r[t]);if(j)for(var t of j(r))ue.call(r,t)&&ce(e,t,r[t]);return e},w=(e,r)=>Oe(e,Se(r)),le=e=>C(e,"__esModule",{value:!0});var b=(e,r)=>{var t={};for(var o in e)L.call(e,o)&&r.indexOf(o)<0&&(t[o]=e[o]);if(e!=null&&j)for(var o of j(e))r.indexOf(o)<0&&ue.call(e,o)&&(t[o]=e[o]);return t};var Le=(e,r)=>()=>(e&&(r=e(e=0)),r);var E=(e,r)=>()=>(r||e((r={exports:{}}).exports,r),r.exports),Ne=(e,r)=>{le(e);for(var t in r)C(e,t,{get:r[t],enumerable:!0})},ze=(e,r,t)=>{if(r&&typeof r=="object"||typeof r=="function")for(let o of Ae(r))!L.call(e,o)&&o!=="default"&&C(e,o,{get:()=>r[o],enumerable:!(t=ke(r,o))||t.enumerable});return e},R=e=>ze(le(C(e!=null?qe(Ie(e)):{},"default",e&&e.__esModule&&"default"in e?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e);var v,u=Le(()=>{v=typeof document=="undefined"?new(require("url")).URL("file:"+__filename).href:document.currentScript&&document.currentScript.src||new URL("main.js",document.baseURI).href});var W=E(B=>{u();var N,z,x=(N={},z=require("react"),Object.keys(z).forEach(function(e){e!=="default"&&e!=="__esModule"&&Object.defineProperty(N,e,{enumerable:!0,get:function(){return z[e]}})}),N);function Be(...e){let r=e[0];if(e.length===1)return r;let t=()=>{let o=e.map(a=>({useScope:a(),scopeName:a.scopeName}));return function(a){let n=o.reduce((s,{useScope:m,scopeName:c})=>l(l({},s),m(a)[`__scope${c}`]),{});return x.useMemo(()=>({[`__scope${r.scopeName}`]:n}),[n])}};return t.scopeName=r.scopeName,t}B.createContext=function(e,r){let t=x.createContext(r);function o(a){let c=a,{children:n}=c,s=b(c,["children"]),m=x.useMemo(()=>s,Object.values(s));return x.createElement(t.Provider,{value:m},n)}return o.displayName=e+"Provider",[o,function(a){let n=x.useContext(t);if(n)return n;if(r!==void 0)return r;throw new Error(`\`${a}\` must be used within \`${e}\``)}]},B.createContextScope=function(e,r=[]){let t=[],o=()=>{let a=t.map(n=>x.createContext(n));return function(n){let s=(n==null?void 0:n[e])||a;return x.useMemo(()=>({[`__scope${e}`]:w(l({},n),{[e]:s})}),[n,s])}};return o.scopeName=e,[function(a,n){let s=x.createContext(n),m=t.length;function c(P){let ie=P,{scope:i,children:d}=ie,h=b(ie,["scope","children"]),y=(i==null?void 0:i[e][m])||s,M=x.useMemo(()=>h,Object.values(h));return x.createElement(y.Provider,{value:M},d)}return t=[...t,n],c.displayName=a+"Provider",[c,function(P,i){let d=(i==null?void 0:i[e][m])||s,h=x.useContext(d);if(h)return h;if(n!==void 0)return n;throw new Error(`\`${P}\` must be used within \`${a}\``)}]},Be(o,...r)]}});var T=E((lr,g)=>{u();function D(){return g.exports=D=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},g.exports.default=g.exports,g.exports.__esModule=!0,D.apply(this,arguments)}g.exports=D;g.exports.default=g.exports,g.exports.__esModule=!0});var pe=E(H=>{u();var F,U,q,We=W().createContext,de=(F={},U=require("react"),Object.keys(U).forEach(function(e){e!=="default"&&e!=="__esModule"&&Object.defineProperty(F,e,{enumerable:!0,get:function(){return U[e]}})}),F),De=(q=T())&&q.__esModule?q.default:q,V={prefix:Math.round(1e10*Math.random()),current:0},[Fe,fe]=We("IdProvider",V);H.IdProvider=e=>{let r=fe("IdProvider"),t=r===V;return de.createElement(Fe,De({prefix:t?0:++r.prefix,current:0},e))},H.useId=function(e){let r=fe("IdProviderConsumer");return Boolean(globalThis==null?void 0:globalThis.document)||r!==V||console.warn("When server rendering, you must wrap your application in an <IdProvider> to ensure consistent ids are generated between the client and server."),de.useMemo(()=>e||`radix-id-${r.prefix}-${++r.current}`,[e])}});var K=E(J=>{u();var Z,G,Ue=(Z={},G=require("react"),Object.keys(G).forEach(function(e){e!=="default"&&e!=="__esModule"&&Object.defineProperty(Z,e,{enumerable:!0,get:function(){return G[e]}})}),Z);function me(...e){return r=>e.forEach(t=>function(o,a){typeof o=="function"?o(a):o!=null&&(o.current=a)}(t,r))}J.composeRefs=me,J.useComposedRefs=function(...e){return Ue.useCallback(me(...e),e)}});var he=E(k=>{u();var Q,X,O,Ve=K().composeRefs,f=(Q={},X=require("react"),Object.keys(X).forEach(function(e){e!=="default"&&e!=="__esModule"&&Object.defineProperty(Q,e,{enumerable:!0,get:function(){return X[e]}})}),Q),be=(O=T())&&O.__esModule?O.default:O,Y=f.forwardRef((e,r)=>{let n=e,{children:t}=n,o=b(n,["children"]),a=f.Children.toArray(t);return a.some(ve)?f.createElement(f.Fragment,null,a.map(s=>ve(s)?f.createElement(ee,be({},o,{ref:r}),s.props.children):s)):f.createElement(ee,be({},o,{ref:r}),t)});k.Slot=Y,Y.displayName="Slot";var ee=f.forwardRef((e,r)=>{let a=e,{children:t}=a,o=b(a,["children"]);return f.isValidElement(t)?f.cloneElement(t,w(l({},He(o,t.props)),{ref:Ve(r,t.ref)})):f.Children.count(t)>1?f.Children.only(null):null});ee.displayName="SlotClone";var xe=({children:e})=>f.createElement(f.Fragment,null,e);function ve(e){return f.isValidElement(e)&&e.type===xe}function He(e,r){let t=l({},r);for(let o in r){let a=e[o],n=r[o];/^on[A-Z]/.test(o)?t[o]=(...s)=>{n==null||n(...s),a==null||a(...s)}:o==="style"?t[o]=l(l({},a),n):o==="className"&&(t[o]=[a,n].filter(Boolean).join(" "))}return l(l({},e),t)}k.Slottable=xe;var Ze=Y;k.Root=Ze});var ye=E(ne=>{u();var re,te,S,Ge=he().Slot,oe=(re={},te=require("react"),Object.keys(te).forEach(function(e){e!=="default"&&e!=="__esModule"&&Object.defineProperty(re,e,{enumerable:!0,get:function(){return te[e]}})}),re),Je=(S=T())&&S.__esModule?S.default:S,ge=["a","button","div","h2","h3","img","li","nav","p","span","svg","ul"].reduce((e,r)=>w(l({},e),{[r]:oe.forwardRef((t,o)=>{let m=t,{asChild:a}=m,n=b(m,["asChild"]),s=a?Ge:r;return oe.useEffect(()=>{window[Symbol.for("radix-ui")]=!0},[]),t.as&&console.error(Ke),oe.createElement(s,Je({},n,{ref:o}))})}),{});ne.Primitive=ge;var Ke="Warning: The `as` prop has been removed in favour of `asChild`. For details, see https://radix-ui.com/docs/primitives/overview/styling#changing-the-rendered-element",Qe=ge;ne.Root=Qe});var _e=E(I=>{u();var ae,se,A,Xe=pe().useId,Ye=ye().Primitive,er=K().useComposedRefs,rr=W().createContext,_=(ae={},se=require("react"),Object.keys(se).forEach(function(e){e!=="default"&&e!=="__esModule"&&Object.defineProperty(ae,e,{enumerable:!0,get:function(){return se[e]}})}),ae),tr=(A=T())&&A.__esModule?A.default:A,[or,nr]=rr("Label",{id:void 0,controlRef:{current:null}}),Ee=_.forwardRef((e,r)=>{let P=e,{htmlFor:t,id:o}=P,a=b(P,["htmlFor","id"]),n=_.useRef(null),s=_.useRef(null),m=er(r,s),c=Xe(o);return _.useEffect(()=>{if(t){let i=document.getElementById(t);if(s.current&&i){let d=()=>i.getAttribute("aria-labelledby"),h=[d(),c].filter(Boolean).join(" ");return i.setAttribute("aria-labelledby",h),n.current=i,()=>{var y;let M=(y=d())===null||y===void 0?void 0:y.replace(c,"");M===""?i.removeAttribute("aria-labelledby"):M&&i.setAttribute("aria-labelledby",M)}}}},[c,t]),_.createElement(or,{id:c,controlRef:n},_.createElement(Ye.span,tr({role:"label",id:c},a,{ref:m,onMouseDown:i=>{var d;(d=e.onMouseDown)===null||d===void 0||d.call(e,i),!i.defaultPrevented&&i.detail>1&&i.preventDefault()},onClick:i=>{var d;if((d=e.onClick)===null||d===void 0||d.call(e,i),!n.current||i.defaultPrevented)return;let h=n.current.contains(i.target),y=i.isTrusted===!0;!h&&y&&(n.current.click(),n.current.focus())}})))});I.Label=Ee;I.useLabelContext=e=>{let r=nr("LabelConsumer"),{controlRef:t}=r;return _.useEffect(()=>{e&&(t.current=e)},[e,t]),r.id};var ar=Ee;I.Root=ar});Ne(exports,{Textarea:()=>sr});u();u();var $=R(require("react"));u();var p=R(require("@neon-district/system")),$e=R(require("react-textarea-autosize")),Pe=R(_e()),we=p.default.div`
  color: white;
`,Me=(0,p.default)(Pe.Root)`
  ${({theme:e})=>p.css`
    display: block;
    margin-bottom: 5px;
    text-transform: uppercase;
    font-weight: ${e.fontWeights.medium};
  `}
`,Ce=e=>({disabled:p.css`
    &:disabled {
      background: ${e.colors.grey1};
      cursor: not-allowed;
    }
  `,hasError:p.css`
    background: ${e.colors.red1};
  `}),Te=(0,p.default)($e.default)`
  ${({theme:e,disabled:r,error:t})=>p.css`
    width: 100%;
    padding: ${e.spaces[2]};
    font-size: ${e.fontSizes.md};
    outline: none;
    background: ${e.colors.black};
    color: ${e.colors.white};
    border: 1px solid;
    border-color: ${e.colors.grey3};

    &:hover {
      border-color: ${e.colors.pink2};
    }

    &:focus {
      border-color: ${e.colors.teal1};
    }

    /* Modifiers */
    ${r&&Ce(e).disabled}
    ${t&&Ce(e).hasError}
  `}
`,je=p.default.small`
  ${({theme:e})=>p.css`
    margin-top: ${e.spaces[1]};
    color: ${e.colors.grey1};
    display: block;
  `}
`,Re=p.default.div`
  ${({theme:e})=>p.css`
    color: ${e.colors.red1};
  `}
`;var sr=$.default.forwardRef((m,s)=>{var c=m,{label:e,hint:r,name:t,error:o,minRows:a=3}=c,n=b(c,["label","hint","name","error","minRows"]);return $.default.createElement(we,null,e&&$.default.createElement(Me,{htmlFor:`textarea-${t}`},e),$.default.createElement(Te,l({ref:s,id:`textarea-${t}`,minRows:a,hasError:!!o},n)),$.default.createElement(je,null,r),$.default.createElement(Re,null,o))});0&&(module.exports={Textarea});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RzdXAvYXNzZXRzL2Nqc19zaGltcy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQHJhZGl4LXVpL3JlYWN0LWNvbnRleHQvZGlzdC9ub2RlX21vZHVsZXMvQHBhcmNlbC9zY29wZS1ob2lzdGluZy9saWIvaGVscGVycy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQHJhZGl4LXVpL3JlYWN0LWNvbnRleHQvZGlzdC9wYWNrYWdlcy9yZWFjdC9jb250ZXh0L3NyYy9jcmVhdGVDb250ZXh0LnRzeCIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AcmFkaXgtdWkvcmVhY3QtaWQvZGlzdC9ub2RlX21vZHVsZXMvQHBhcmNlbC9zY29wZS1ob2lzdGluZy9saWIvaGVscGVycy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQHJhZGl4LXVpL3JlYWN0LWlkL2Rpc3QvcGFja2FnZXMvcmVhY3QvaWQvc3JjL2lkLnRzeCIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQHJhZGl4LXVpL3JlYWN0LWNvbXBvc2UtcmVmcy9kaXN0L25vZGVfbW9kdWxlcy9AcGFyY2VsL3Njb3BlLWhvaXN0aW5nL2xpYi9oZWxwZXJzLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AcmFkaXgtdWkvcmVhY3QtY29tcG9zZS1yZWZzL2Rpc3QvcGFja2FnZXMvcmVhY3QvY29tcG9zZS1yZWZzL3NyYy9jb21wb3NlUmVmcy50c3giLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0ByYWRpeC11aS9yZWFjdC1zbG90L2Rpc3Qvbm9kZV9tb2R1bGVzL0BwYXJjZWwvc2NvcGUtaG9pc3RpbmcvbGliL2hlbHBlcnMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0ByYWRpeC11aS9yZWFjdC1zbG90L2Rpc3QvcGFja2FnZXMvcmVhY3Qvc2xvdC9zcmMvU2xvdC50c3giLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0ByYWRpeC11aS9yZWFjdC1wcmltaXRpdmUvZGlzdC9ub2RlX21vZHVsZXMvQHBhcmNlbC9zY29wZS1ob2lzdGluZy9saWIvaGVscGVycy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQHJhZGl4LXVpL3JlYWN0LXByaW1pdGl2ZS9kaXN0L3BhY2thZ2VzL3JlYWN0L3ByaW1pdGl2ZS9zcmMvUHJpbWl0aXZlLnRzeCIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQHJhZGl4LXVpL3JlYWN0LWxhYmVsL2Rpc3Qvbm9kZV9tb2R1bGVzL0BwYXJjZWwvc2NvcGUtaG9pc3RpbmcvbGliL2hlbHBlcnMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0ByYWRpeC11aS9yZWFjdC1sYWJlbC9kaXN0L3BhY2thZ2VzL3JlYWN0L2xhYmVsL3NyYy9MYWJlbC50c3giLCAiLi4vaW5kZXgudHMiLCAiLi4vc3JjL2luZGV4LnRzeCIsICIuLi9zcmMvc3R5bGVzLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJleHBvcnQgY29uc3QgaW1wb3J0TWV0YVVybFNoaW0gPVxuICB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnXG4gICAgPyBuZXcgKHJlcXVpcmUoJ3UnICsgJ3JsJykuVVJMKSgnZmlsZTonICsgX19maWxlbmFtZSkuaHJlZlxuICAgIDogKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgJiYgZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmMpIHx8XG4gICAgICBuZXcgVVJMKCdtYWluLmpzJywgZG9jdW1lbnQuYmFzZVVSSSkuaHJlZlxuIiwgImZ1bmN0aW9uICRwYXJjZWwkaW50ZXJvcERlZmF1bHQoYSkge1xuICByZXR1cm4gYSAmJiBhLl9fZXNNb2R1bGUgPyBhLmRlZmF1bHQgOiBhO1xufVxuXG5mdW5jdGlvbiAkcGFyY2VsJGRlZmluZUludGVyb3BGbGFnKGEpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGEsICdfX2VzTW9kdWxlJywge3ZhbHVlOiB0cnVlfSk7XG59XG5cbmZ1bmN0aW9uICRwYXJjZWwkcmVleHBvcnQoZSwgbiwgdikge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgbiwge2dldDogdiwgZW51bWVyYWJsZTogdHJ1ZX0pO1xufVxuXG5mdW5jdGlvbiAkcGFyY2VsJGV4cG9ydFdpbGRjYXJkKGRlc3QsIHNvdXJjZSkge1xuICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKGtleSA9PT0gJ2RlZmF1bHQnIHx8IGtleSA9PT0gJ19fZXNNb2R1bGUnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRlc3QsIGtleSwge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gc291cmNlW2tleV07XG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gZGVzdDtcbn1cblxuZnVuY3Rpb24gJHBhcmNlbCRtaXNzaW5nTW9kdWxlKG5hbWUpIHtcbiAgdmFyIGVyciA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyBuYW1lICsgXCInXCIpO1xuICBlcnIuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcbiAgdGhyb3cgZXJyO1xufVxuXG52YXIgJHBhcmNlbCRnbG9iYWwgPVxuICB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCdcbiAgICA/IGdsb2JhbFRoaXNcbiAgICA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJ1xuICAgID8gc2VsZlxuICAgIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcbiAgICA/IHdpbmRvd1xuICAgIDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCdcbiAgICA/IGdsb2JhbFxuICAgIDoge307XG4iLCAiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5mdW5jdGlvbiBjcmVhdGVDb250ZXh0PENvbnRleHRWYWx1ZVR5cGUgZXh0ZW5kcyBvYmplY3QgfCBudWxsPihcbiAgcm9vdENvbXBvbmVudE5hbWU6IHN0cmluZyxcbiAgZGVmYXVsdENvbnRleHQ/OiBDb250ZXh0VmFsdWVUeXBlXG4pIHtcbiAgY29uc3QgQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8Q29udGV4dFZhbHVlVHlwZSB8IHVuZGVmaW5lZD4oZGVmYXVsdENvbnRleHQpO1xuXG4gIGZ1bmN0aW9uIFByb3ZpZGVyKHByb3BzOiBDb250ZXh0VmFsdWVUeXBlICYgeyBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIH0pIHtcbiAgICBjb25zdCB7IGNoaWxkcmVuLCAuLi5jb250ZXh0IH0gPSBwcm9wcztcbiAgICAvLyBPbmx5IHJlLW1lbW9pemUgd2hlbiBwcm9wIHZhbHVlcyBjaGFuZ2VcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gICAgY29uc3QgdmFsdWUgPSBSZWFjdC51c2VNZW1vKCgpID0+IGNvbnRleHQsIE9iamVjdC52YWx1ZXMoY29udGV4dCkpIGFzIENvbnRleHRWYWx1ZVR5cGU7XG4gICAgcmV0dXJuIDxDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt2YWx1ZX0+e2NoaWxkcmVufTwvQ29udGV4dC5Qcm92aWRlcj47XG4gIH1cblxuICBmdW5jdGlvbiB1c2VDb250ZXh0KGNvbnN1bWVyTmFtZTogc3RyaW5nKSB7XG4gICAgY29uc3QgY29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoQ29udGV4dCk7XG4gICAgaWYgKGNvbnRleHQpIHJldHVybiBjb250ZXh0O1xuICAgIGlmIChkZWZhdWx0Q29udGV4dCAhPT0gdW5kZWZpbmVkKSByZXR1cm4gZGVmYXVsdENvbnRleHQ7XG4gICAgLy8gaWYgYSBkZWZhdWx0Q29udGV4dCB3YXNuJ3Qgc3BlY2lmaWVkLCBpdCdzIGEgcmVxdWlyZWQgY29udGV4dC5cbiAgICB0aHJvdyBuZXcgRXJyb3IoYFxcYCR7Y29uc3VtZXJOYW1lfVxcYCBtdXN0IGJlIHVzZWQgd2l0aGluIFxcYCR7cm9vdENvbXBvbmVudE5hbWV9XFxgYCk7XG4gIH1cblxuICBQcm92aWRlci5kaXNwbGF5TmFtZSA9IHJvb3RDb21wb25lbnROYW1lICsgJ1Byb3ZpZGVyJztcbiAgcmV0dXJuIFtQcm92aWRlciwgdXNlQ29udGV4dF0gYXMgY29uc3Q7XG59XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGNyZWF0ZUNvbnRleHRTY29wZVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG50eXBlIFNjb3BlPEMgPSBhbnk+ID0geyBbc2NvcGVOYW1lOiBzdHJpbmddOiBSZWFjdC5Db250ZXh0PEM+W10gfSB8IHVuZGVmaW5lZDtcbnR5cGUgU2NvcGVIb29rID0gKHNjb3BlOiBTY29wZSkgPT4geyBbX19zY29wZVByb3A6IHN0cmluZ106IFNjb3BlIH07XG5pbnRlcmZhY2UgQ3JlYXRlU2NvcGUge1xuICBzY29wZU5hbWU6IHN0cmluZztcbiAgKCk6IFNjb3BlSG9vaztcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29udGV4dFNjb3BlKHNjb3BlTmFtZTogc3RyaW5nLCBjcmVhdGVDb250ZXh0U2NvcGVEZXBzOiBDcmVhdGVTY29wZVtdID0gW10pIHtcbiAgbGV0IGRlZmF1bHRDb250ZXh0czogYW55W10gPSBbXTtcblxuICAvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBjcmVhdGVDb250ZXh0XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgZnVuY3Rpb24gY3JlYXRlQ29udGV4dDxDb250ZXh0VmFsdWVUeXBlIGV4dGVuZHMgb2JqZWN0IHwgbnVsbD4oXG4gICAgcm9vdENvbXBvbmVudE5hbWU6IHN0cmluZyxcbiAgICBkZWZhdWx0Q29udGV4dD86IENvbnRleHRWYWx1ZVR5cGVcbiAgKSB7XG4gICAgY29uc3QgQmFzZUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PENvbnRleHRWYWx1ZVR5cGUgfCB1bmRlZmluZWQ+KGRlZmF1bHRDb250ZXh0KTtcbiAgICBjb25zdCBpbmRleCA9IGRlZmF1bHRDb250ZXh0cy5sZW5ndGg7XG4gICAgZGVmYXVsdENvbnRleHRzID0gWy4uLmRlZmF1bHRDb250ZXh0cywgZGVmYXVsdENvbnRleHRdO1xuXG4gICAgZnVuY3Rpb24gUHJvdmlkZXIoXG4gICAgICBwcm9wczogQ29udGV4dFZhbHVlVHlwZSAmIHsgc2NvcGU6IFNjb3BlPENvbnRleHRWYWx1ZVR5cGU+OyBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIH1cbiAgICApIHtcbiAgICAgIGNvbnN0IHsgc2NvcGUsIGNoaWxkcmVuLCAuLi5jb250ZXh0IH0gPSBwcm9wcztcbiAgICAgIGNvbnN0IENvbnRleHQgPSBzY29wZT8uW3Njb3BlTmFtZV1baW5kZXhdIHx8IEJhc2VDb250ZXh0O1xuICAgICAgLy8gT25seSByZS1tZW1vaXplIHdoZW4gcHJvcCB2YWx1ZXMgY2hhbmdlXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gICAgICBjb25zdCB2YWx1ZSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gY29udGV4dCwgT2JqZWN0LnZhbHVlcyhjb250ZXh0KSkgYXMgQ29udGV4dFZhbHVlVHlwZTtcbiAgICAgIHJldHVybiA8Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17dmFsdWV9PntjaGlsZHJlbn08L0NvbnRleHQuUHJvdmlkZXI+O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVzZUNvbnRleHQoY29uc3VtZXJOYW1lOiBzdHJpbmcsIHNjb3BlOiBTY29wZTxDb250ZXh0VmFsdWVUeXBlIHwgdW5kZWZpbmVkPikge1xuICAgICAgY29uc3QgQ29udGV4dCA9IHNjb3BlPy5bc2NvcGVOYW1lXVtpbmRleF0gfHwgQmFzZUNvbnRleHQ7XG4gICAgICBjb25zdCBjb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChDb250ZXh0KTtcbiAgICAgIGlmIChjb250ZXh0KSByZXR1cm4gY29udGV4dDtcbiAgICAgIGlmIChkZWZhdWx0Q29udGV4dCAhPT0gdW5kZWZpbmVkKSByZXR1cm4gZGVmYXVsdENvbnRleHQ7XG4gICAgICAvLyBpZiBhIGRlZmF1bHRDb250ZXh0IHdhc24ndCBzcGVjaWZpZWQsIGl0J3MgYSByZXF1aXJlZCBjb250ZXh0LlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBcXGAke2NvbnN1bWVyTmFtZX1cXGAgbXVzdCBiZSB1c2VkIHdpdGhpbiBcXGAke3Jvb3RDb21wb25lbnROYW1lfVxcYGApO1xuICAgIH1cblxuICAgIFByb3ZpZGVyLmRpc3BsYXlOYW1lID0gcm9vdENvbXBvbmVudE5hbWUgKyAnUHJvdmlkZXInO1xuICAgIHJldHVybiBbUHJvdmlkZXIsIHVzZUNvbnRleHRdIGFzIGNvbnN0O1xuICB9XG5cbiAgLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogY3JlYXRlU2NvcGVcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICBjb25zdCBjcmVhdGVTY29wZTogQ3JlYXRlU2NvcGUgPSAoKSA9PiB7XG4gICAgY29uc3Qgc2NvcGVDb250ZXh0cyA9IGRlZmF1bHRDb250ZXh0cy5tYXAoKGRlZmF1bHRDb250ZXh0KSA9PiB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlQ29udGV4dChkZWZhdWx0Q29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVzZVNjb3BlKHNjb3BlOiBTY29wZSkge1xuICAgICAgY29uc3QgY29udGV4dHMgPSBzY29wZT8uW3Njb3BlTmFtZV0gfHwgc2NvcGVDb250ZXh0cztcbiAgICAgIHJldHVybiBSZWFjdC51c2VNZW1vKFxuICAgICAgICAoKSA9PiAoeyBbYF9fc2NvcGUke3Njb3BlTmFtZX1gXTogeyAuLi5zY29wZSwgW3Njb3BlTmFtZV06IGNvbnRleHRzIH0gfSksXG4gICAgICAgIFtzY29wZSwgY29udGV4dHNdXG4gICAgICApO1xuICAgIH07XG4gIH07XG5cbiAgY3JlYXRlU2NvcGUuc2NvcGVOYW1lID0gc2NvcGVOYW1lO1xuICByZXR1cm4gW2NyZWF0ZUNvbnRleHQsIGNvbXBvc2VDb250ZXh0U2NvcGVzKGNyZWF0ZVNjb3BlLCAuLi5jcmVhdGVDb250ZXh0U2NvcGVEZXBzKV0gYXMgY29uc3Q7XG59XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGNvbXBvc2VDb250ZXh0U2NvcGVzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbmZ1bmN0aW9uIGNvbXBvc2VDb250ZXh0U2NvcGVzKC4uLnNjb3BlczogQ3JlYXRlU2NvcGVbXSkge1xuICBjb25zdCBiYXNlU2NvcGUgPSBzY29wZXNbMF07XG4gIGlmIChzY29wZXMubGVuZ3RoID09PSAxKSByZXR1cm4gYmFzZVNjb3BlO1xuXG4gIGNvbnN0IGNyZWF0ZVNjb3BlOiBDcmVhdGVTY29wZSA9ICgpID0+IHtcbiAgICBjb25zdCBzY29wZUhvb2tzID0gc2NvcGVzLm1hcCgoY3JlYXRlU2NvcGUpID0+ICh7XG4gICAgICB1c2VTY29wZTogY3JlYXRlU2NvcGUoKSxcbiAgICAgIHNjb3BlTmFtZTogY3JlYXRlU2NvcGUuc2NvcGVOYW1lLFxuICAgIH0pKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiB1c2VDb21wb3NlZFNjb3BlcyhvdmVycmlkZVNjb3Blcykge1xuICAgICAgY29uc3QgbmV4dFNjb3BlcyA9IHNjb3BlSG9va3MucmVkdWNlKChuZXh0U2NvcGVzLCB7IHVzZVNjb3BlLCBzY29wZU5hbWUgfSkgPT4ge1xuICAgICAgICAvLyBXZSBhcmUgY2FsbGluZyBhIGhvb2sgaW5zaWRlIGEgY2FsbGJhY2sgd2hpY2ggUmVhY3Qgd2FybnMgYWdhaW5zdCB0byBhdm9pZCBpbmNvbnNpc3RlbnRcbiAgICAgICAgLy8gcmVuZGVycywgaG93ZXZlciwgc2NvcGluZyBkb2Vzbid0IGhhdmUgcmVuZGVyIHNpZGUgZWZmZWN0cyBzbyB3ZSBpZ25vcmUgdGhlIHJ1bGUuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgICAgICBjb25zdCBzY29wZVByb3BzID0gdXNlU2NvcGUob3ZlcnJpZGVTY29wZXMpO1xuICAgICAgICBjb25zdCBjdXJyZW50U2NvcGUgPSBzY29wZVByb3BzW2BfX3Njb3BlJHtzY29wZU5hbWV9YF07XG4gICAgICAgIHJldHVybiB7IC4uLm5leHRTY29wZXMsIC4uLmN1cnJlbnRTY29wZSB9O1xuICAgICAgfSwge30pO1xuXG4gICAgICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiAoeyBbYF9fc2NvcGUke2Jhc2VTY29wZS5zY29wZU5hbWV9YF06IG5leHRTY29wZXMgfSksIFtuZXh0U2NvcGVzXSk7XG4gICAgfTtcbiAgfTtcblxuICBjcmVhdGVTY29wZS5zY29wZU5hbWUgPSBiYXNlU2NvcGUuc2NvcGVOYW1lO1xuICByZXR1cm4gY3JlYXRlU2NvcGU7XG59XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuZXhwb3J0IHsgY3JlYXRlQ29udGV4dCwgY3JlYXRlQ29udGV4dFNjb3BlIH07XG5leHBvcnQgdHlwZSB7IENyZWF0ZVNjb3BlLCBTY29wZSB9O1xuIiwgImZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyIsICJmdW5jdGlvbiAkcGFyY2VsJGludGVyb3BEZWZhdWx0KGEpIHtcbiAgcmV0dXJuIGEgJiYgYS5fX2VzTW9kdWxlID8gYS5kZWZhdWx0IDogYTtcbn1cblxuZnVuY3Rpb24gJHBhcmNlbCRkZWZpbmVJbnRlcm9wRmxhZyhhKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLCAnX19lc01vZHVsZScsIHt2YWx1ZTogdHJ1ZX0pO1xufVxuXG5mdW5jdGlvbiAkcGFyY2VsJHJlZXhwb3J0KGUsIG4sIHYpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIG4sIHtnZXQ6IHYsIGVudW1lcmFibGU6IHRydWV9KTtcbn1cblxuZnVuY3Rpb24gJHBhcmNlbCRleHBvcnRXaWxkY2FyZChkZXN0LCBzb3VyY2UpIHtcbiAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIGlmIChrZXkgPT09ICdkZWZhdWx0JyB8fCBrZXkgPT09ICdfX2VzTW9kdWxlJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkZXN0LCBrZXksIHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZVtrZXldO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRlc3Q7XG59XG5cbmZ1bmN0aW9uICRwYXJjZWwkbWlzc2luZ01vZHVsZShuYW1lKSB7XG4gIHZhciBlcnIgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgbmFtZSArIFwiJ1wiKTtcbiAgZXJyLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG4gIHRocm93IGVycjtcbn1cblxudmFyICRwYXJjZWwkZ2xvYmFsID1cbiAgdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnXG4gICAgPyBnbG9iYWxUaGlzXG4gICAgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCdcbiAgICA/IHNlbGZcbiAgICA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgPyB3aW5kb3dcbiAgICA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnXG4gICAgPyBnbG9iYWxcbiAgICA6IHt9O1xuIiwgIi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgaGVhdmlseSBpbnNwaXJlZCBieSByZWFjdC1hcmlhJ3MgaW1wbGVtZW50YXRpb25cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Fkb2JlL3JlYWN0LXNwZWN0cnVtL2Jsb2IvbWFpbi9wYWNrYWdlcy8lNDByZWFjdC1hcmlhL3Nzci9zcmMvU1NSUHJvdmlkZXIudHN4XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUNvbnRleHQgfSBmcm9tICdAcmFkaXgtdWkvcmVhY3QtY29udGV4dCc7XG5cbmNvbnN0IFBST1ZJREVSX05BTUUgPSAnSWRQcm92aWRlcic7XG5cbmNvbnN0IGRlZmF1bHRJZENvbnRleHQgPSB7XG4gIHByZWZpeDogTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAwMDApLFxuICBjdXJyZW50OiAwLFxufTtcblxuY29uc3QgW0lkUHJvdmlkZXJJbXBsLCB1c2VJZENvbnRleHRdID0gY3JlYXRlQ29udGV4dChQUk9WSURFUl9OQU1FLCBkZWZhdWx0SWRDb250ZXh0KTtcblxuY29uc3QgSWRQcm92aWRlcjogUmVhY3QuRkM8eyBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIH0+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IGN1cnJlbnRDb250ZXh0ID0gdXNlSWRDb250ZXh0KFBST1ZJREVSX05BTUUpO1xuICBjb25zdCBpc1Jvb3RJZFByb3ZpZGVyID0gY3VycmVudENvbnRleHQgPT09IGRlZmF1bHRJZENvbnRleHQ7XG4gIHJldHVybiAoXG4gICAgPElkUHJvdmlkZXJJbXBsXG4gICAgICBwcmVmaXg9e2lzUm9vdElkUHJvdmlkZXIgPyAwIDogKytjdXJyZW50Q29udGV4dC5wcmVmaXh9XG4gICAgICBjdXJyZW50PXswfVxuICAgICAgey4uLnByb3BzfVxuICAgIC8+XG4gICk7XG59O1xuXG5mdW5jdGlvbiB1c2VJZChkZXRlcm1pbmlzdGljSWQ/OiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBjb250ZXh0ID0gdXNlSWRDb250ZXh0KCdJZFByb3ZpZGVyQ29uc3VtZXInKTtcbiAgY29uc3QgaXNCcm93c2VyID0gQm9vbGVhbihnbG9iYWxUaGlzPy5kb2N1bWVudCk7XG5cbiAgaWYgKCFpc0Jyb3dzZXIgJiYgY29udGV4dCA9PT0gZGVmYXVsdElkQ29udGV4dCkge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdXaGVuIHNlcnZlciByZW5kZXJpbmcsIHlvdSBtdXN0IHdyYXAgeW91ciBhcHBsaWNhdGlvbiBpbiBhbiA8SWRQcm92aWRlcj4gdG8gZW5zdXJlIGNvbnNpc3RlbnQgaWRzIGFyZSBnZW5lcmF0ZWQgYmV0d2VlbiB0aGUgY2xpZW50IGFuZCBzZXJ2ZXIuJ1xuICAgICk7XG4gIH1cblxuICByZXR1cm4gUmVhY3QudXNlTWVtbyhcbiAgICAoKSA9PiBkZXRlcm1pbmlzdGljSWQgfHwgYHJhZGl4LWlkLSR7Y29udGV4dC5wcmVmaXh9LSR7Kytjb250ZXh0LmN1cnJlbnR9YCxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gICAgW2RldGVybWluaXN0aWNJZF1cbiAgKTtcbn1cblxuZXhwb3J0IHsgSWRQcm92aWRlciwgdXNlSWQgfTtcbiIsICJmdW5jdGlvbiAkcGFyY2VsJGludGVyb3BEZWZhdWx0KGEpIHtcbiAgcmV0dXJuIGEgJiYgYS5fX2VzTW9kdWxlID8gYS5kZWZhdWx0IDogYTtcbn1cblxuZnVuY3Rpb24gJHBhcmNlbCRkZWZpbmVJbnRlcm9wRmxhZyhhKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLCAnX19lc01vZHVsZScsIHt2YWx1ZTogdHJ1ZX0pO1xufVxuXG5mdW5jdGlvbiAkcGFyY2VsJHJlZXhwb3J0KGUsIG4sIHYpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIG4sIHtnZXQ6IHYsIGVudW1lcmFibGU6IHRydWV9KTtcbn1cblxuZnVuY3Rpb24gJHBhcmNlbCRleHBvcnRXaWxkY2FyZChkZXN0LCBzb3VyY2UpIHtcbiAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIGlmIChrZXkgPT09ICdkZWZhdWx0JyB8fCBrZXkgPT09ICdfX2VzTW9kdWxlJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkZXN0LCBrZXksIHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZVtrZXldO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRlc3Q7XG59XG5cbmZ1bmN0aW9uICRwYXJjZWwkbWlzc2luZ01vZHVsZShuYW1lKSB7XG4gIHZhciBlcnIgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgbmFtZSArIFwiJ1wiKTtcbiAgZXJyLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG4gIHRocm93IGVycjtcbn1cblxudmFyICRwYXJjZWwkZ2xvYmFsID1cbiAgdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnXG4gICAgPyBnbG9iYWxUaGlzXG4gICAgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCdcbiAgICA/IHNlbGZcbiAgICA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgPyB3aW5kb3dcbiAgICA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnXG4gICAgPyBnbG9iYWxcbiAgICA6IHt9O1xuIiwgImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxudHlwZSBQb3NzaWJsZVJlZjxUPiA9IFJlYWN0LlJlZjxUPiB8IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBTZXQgYSBnaXZlbiByZWYgdG8gYSBnaXZlbiB2YWx1ZVxuICogVGhpcyB1dGlsaXR5IHRha2VzIGNhcmUgb2YgZGlmZmVyZW50IHR5cGVzIG9mIHJlZnM6IGNhbGxiYWNrIHJlZnMgYW5kIFJlZk9iamVjdChzKVxuICovXG5mdW5jdGlvbiBzZXRSZWY8VD4ocmVmOiBQb3NzaWJsZVJlZjxUPiwgdmFsdWU6IFQpIHtcbiAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZWYodmFsdWUpO1xuICB9IGVsc2UgaWYgKHJlZiAhPT0gbnVsbCAmJiByZWYgIT09IHVuZGVmaW5lZCkge1xuICAgIChyZWYgYXMgUmVhY3QuTXV0YWJsZVJlZk9iamVjdDxUPikuY3VycmVudCA9IHZhbHVlO1xuICB9XG59XG5cbi8qKlxuICogQSB1dGlsaXR5IHRvIGNvbXBvc2UgbXVsdGlwbGUgcmVmcyB0b2dldGhlclxuICogQWNjZXB0cyBjYWxsYmFjayByZWZzIGFuZCBSZWZPYmplY3QocylcbiAqL1xuZnVuY3Rpb24gY29tcG9zZVJlZnM8VD4oLi4ucmVmczogUG9zc2libGVSZWY8VD5bXSkge1xuICByZXR1cm4gKG5vZGU6IFQpID0+IHJlZnMuZm9yRWFjaCgocmVmKSA9PiBzZXRSZWYocmVmLCBub2RlKSk7XG59XG5cbi8qKlxuICogQSBjdXN0b20gaG9vayB0aGF0IGNvbXBvc2VzIG11bHRpcGxlIHJlZnNcbiAqIEFjY2VwdHMgY2FsbGJhY2sgcmVmcyBhbmQgUmVmT2JqZWN0KHMpXG4gKi9cbmZ1bmN0aW9uIHVzZUNvbXBvc2VkUmVmczxUPiguLi5yZWZzOiBQb3NzaWJsZVJlZjxUPltdKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgcmV0dXJuIFJlYWN0LnVzZUNhbGxiYWNrKGNvbXBvc2VSZWZzKC4uLnJlZnMpLCByZWZzKTtcbn1cblxuZXhwb3J0IHsgY29tcG9zZVJlZnMsIHVzZUNvbXBvc2VkUmVmcyB9O1xuIiwgImZ1bmN0aW9uICRwYXJjZWwkaW50ZXJvcERlZmF1bHQoYSkge1xuICByZXR1cm4gYSAmJiBhLl9fZXNNb2R1bGUgPyBhLmRlZmF1bHQgOiBhO1xufVxuXG5mdW5jdGlvbiAkcGFyY2VsJGRlZmluZUludGVyb3BGbGFnKGEpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGEsICdfX2VzTW9kdWxlJywge3ZhbHVlOiB0cnVlfSk7XG59XG5cbmZ1bmN0aW9uICRwYXJjZWwkcmVleHBvcnQoZSwgbiwgdikge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgbiwge2dldDogdiwgZW51bWVyYWJsZTogdHJ1ZX0pO1xufVxuXG5mdW5jdGlvbiAkcGFyY2VsJGV4cG9ydFdpbGRjYXJkKGRlc3QsIHNvdXJjZSkge1xuICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKGtleSA9PT0gJ2RlZmF1bHQnIHx8IGtleSA9PT0gJ19fZXNNb2R1bGUnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRlc3QsIGtleSwge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gc291cmNlW2tleV07XG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gZGVzdDtcbn1cblxuZnVuY3Rpb24gJHBhcmNlbCRtaXNzaW5nTW9kdWxlKG5hbWUpIHtcbiAgdmFyIGVyciA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyBuYW1lICsgXCInXCIpO1xuICBlcnIuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcbiAgdGhyb3cgZXJyO1xufVxuXG52YXIgJHBhcmNlbCRnbG9iYWwgPVxuICB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCdcbiAgICA/IGdsb2JhbFRoaXNcbiAgICA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJ1xuICAgID8gc2VsZlxuICAgIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcbiAgICA/IHdpbmRvd1xuICAgIDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCdcbiAgICA/IGdsb2JhbFxuICAgIDoge307XG4iLCAiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY29tcG9zZVJlZnMgfSBmcm9tICdAcmFkaXgtdWkvcmVhY3QtY29tcG9zZS1yZWZzJztcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogU2xvdFxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5pbnRlcmZhY2UgU2xvdFByb3BzIGV4dGVuZHMgUmVhY3QuSFRNTEF0dHJpYnV0ZXM8SFRNTEVsZW1lbnQ+IHtcbiAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGU7XG59XG5cbmNvbnN0IFNsb3QgPSBSZWFjdC5mb3J3YXJkUmVmPEhUTUxFbGVtZW50LCBTbG90UHJvcHM+KChwcm9wcywgZm9yd2FyZGVkUmVmKSA9PiB7XG4gIGNvbnN0IHsgY2hpbGRyZW4sIC4uLnNsb3RQcm9wcyB9ID0gcHJvcHM7XG4gIGNvbnN0IGNoaWxkQXJyYXkgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuKTtcblxuICBpZiAoY2hpbGRBcnJheS5zb21lKGlzU2xvdHRhYmxlKSkge1xuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICB7Y2hpbGRBcnJheS5tYXAoKGNoaWxkKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGlzU2xvdHRhYmxlKGNoaWxkKSA/IChcbiAgICAgICAgICAgIDxTbG90Q2xvbmUgey4uLnNsb3RQcm9wc30gcmVmPXtmb3J3YXJkZWRSZWZ9PlxuICAgICAgICAgICAgICB7Y2hpbGQucHJvcHMuY2hpbGRyZW59XG4gICAgICAgICAgICA8L1Nsb3RDbG9uZT5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgY2hpbGRcbiAgICAgICAgICApO1xuICAgICAgICB9KX1cbiAgICAgIDwvPlxuICAgICk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxTbG90Q2xvbmUgey4uLnNsb3RQcm9wc30gcmVmPXtmb3J3YXJkZWRSZWZ9PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvU2xvdENsb25lPlxuICApO1xufSk7XG5cblNsb3QuZGlzcGxheU5hbWUgPSAnU2xvdCc7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFNsb3RDbG9uZVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5pbnRlcmZhY2UgU2xvdENsb25lUHJvcHMge1xuICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlO1xufVxuXG5jb25zdCBTbG90Q2xvbmUgPSBSZWFjdC5mb3J3YXJkUmVmPGFueSwgU2xvdENsb25lUHJvcHM+KChwcm9wcywgZm9yd2FyZGVkUmVmKSA9PiB7XG4gIGNvbnN0IHsgY2hpbGRyZW4sIC4uLnNsb3RQcm9wcyB9ID0gcHJvcHM7XG5cbiAgaWYgKFJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSkge1xuICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHtcbiAgICAgIC4uLm1lcmdlUHJvcHMoc2xvdFByb3BzLCBjaGlsZHJlbi5wcm9wcyksXG4gICAgICByZWY6IGNvbXBvc2VSZWZzKGZvcndhcmRlZFJlZiwgKGNoaWxkcmVuIGFzIGFueSkucmVmKSxcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPiAxID8gUmVhY3QuQ2hpbGRyZW4ub25seShudWxsKSA6IG51bGw7XG59KTtcblxuU2xvdENsb25lLmRpc3BsYXlOYW1lID0gJ1Nsb3RDbG9uZSc7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFNsb3R0YWJsZVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5jb25zdCBTbG90dGFibGUgPSAoeyBjaGlsZHJlbiB9OiB7IGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUgfSkgPT4ge1xuICByZXR1cm4gPD57Y2hpbGRyZW59PC8+O1xufTtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG50eXBlIEFueVByb3BzID0gUmVjb3JkPHN0cmluZywgYW55PjtcblxuZnVuY3Rpb24gaXNTbG90dGFibGUoY2hpbGQ6IFJlYWN0LlJlYWN0Tm9kZSk6IGNoaWxkIGlzIFJlYWN0LlJlYWN0RWxlbWVudCB7XG4gIHJldHVybiBSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkgJiYgY2hpbGQudHlwZSA9PT0gU2xvdHRhYmxlO1xufVxuXG5mdW5jdGlvbiBtZXJnZVByb3BzKHNsb3RQcm9wczogQW55UHJvcHMsIGNoaWxkUHJvcHM6IEFueVByb3BzKSB7XG4gIC8vIGFsbCBjaGlsZCBwcm9wcyBzaG91bGQgb3ZlcnJpZGVcbiAgY29uc3Qgb3ZlcnJpZGVQcm9wcyA9IHsgLi4uY2hpbGRQcm9wcyB9O1xuXG4gIGZvciAoY29uc3QgcHJvcE5hbWUgaW4gY2hpbGRQcm9wcykge1xuICAgIGNvbnN0IHNsb3RQcm9wVmFsdWUgPSBzbG90UHJvcHNbcHJvcE5hbWVdO1xuICAgIGNvbnN0IGNoaWxkUHJvcFZhbHVlID0gY2hpbGRQcm9wc1twcm9wTmFtZV07XG5cbiAgICBjb25zdCBpc0hhbmRsZXIgPSAvXm9uW0EtWl0vLnRlc3QocHJvcE5hbWUpO1xuICAgIC8vIGlmIGl0J3MgYSBoYW5kbGVyLCBtb2RpZnkgdGhlIG92ZXJyaWRlIGJ5IGNvbXBvc2luZyB0aGUgYmFzZSBoYW5kbGVyXG4gICAgaWYgKGlzSGFuZGxlcikge1xuICAgICAgb3ZlcnJpZGVQcm9wc1twcm9wTmFtZV0gPSAoLi4uYXJnczogdW5rbm93bltdKSA9PiB7XG4gICAgICAgIGNoaWxkUHJvcFZhbHVlPy4oLi4uYXJncyk7XG4gICAgICAgIHNsb3RQcm9wVmFsdWU/LiguLi5hcmdzKTtcbiAgICAgIH07XG4gICAgfVxuICAgIC8vIGlmIGl0J3MgYHN0eWxlYCwgd2UgbWVyZ2UgdGhlbVxuICAgIGVsc2UgaWYgKHByb3BOYW1lID09PSAnc3R5bGUnKSB7XG4gICAgICBvdmVycmlkZVByb3BzW3Byb3BOYW1lXSA9IHsgLi4uc2xvdFByb3BWYWx1ZSwgLi4uY2hpbGRQcm9wVmFsdWUgfTtcbiAgICB9IGVsc2UgaWYgKHByb3BOYW1lID09PSAnY2xhc3NOYW1lJykge1xuICAgICAgb3ZlcnJpZGVQcm9wc1twcm9wTmFtZV0gPSBbc2xvdFByb3BWYWx1ZSwgY2hpbGRQcm9wVmFsdWVdLmZpbHRlcihCb29sZWFuKS5qb2luKCcgJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHsgLi4uc2xvdFByb3BzLCAuLi5vdmVycmlkZVByb3BzIH07XG59XG5cbmNvbnN0IFJvb3QgPSBTbG90O1xuXG5leHBvcnQge1xuICBTbG90LFxuICBTbG90dGFibGUsXG4gIC8vXG4gIFJvb3QsXG59O1xuZXhwb3J0IHR5cGUgeyBTbG90UHJvcHMgfTtcbiIsICJmdW5jdGlvbiAkcGFyY2VsJGludGVyb3BEZWZhdWx0KGEpIHtcbiAgcmV0dXJuIGEgJiYgYS5fX2VzTW9kdWxlID8gYS5kZWZhdWx0IDogYTtcbn1cblxuZnVuY3Rpb24gJHBhcmNlbCRkZWZpbmVJbnRlcm9wRmxhZyhhKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLCAnX19lc01vZHVsZScsIHt2YWx1ZTogdHJ1ZX0pO1xufVxuXG5mdW5jdGlvbiAkcGFyY2VsJHJlZXhwb3J0KGUsIG4sIHYpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIG4sIHtnZXQ6IHYsIGVudW1lcmFibGU6IHRydWV9KTtcbn1cblxuZnVuY3Rpb24gJHBhcmNlbCRleHBvcnRXaWxkY2FyZChkZXN0LCBzb3VyY2UpIHtcbiAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIGlmIChrZXkgPT09ICdkZWZhdWx0JyB8fCBrZXkgPT09ICdfX2VzTW9kdWxlJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkZXN0LCBrZXksIHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZVtrZXldO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRlc3Q7XG59XG5cbmZ1bmN0aW9uICRwYXJjZWwkbWlzc2luZ01vZHVsZShuYW1lKSB7XG4gIHZhciBlcnIgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgbmFtZSArIFwiJ1wiKTtcbiAgZXJyLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG4gIHRocm93IGVycjtcbn1cblxudmFyICRwYXJjZWwkZ2xvYmFsID1cbiAgdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnXG4gICAgPyBnbG9iYWxUaGlzXG4gICAgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCdcbiAgICA/IHNlbGZcbiAgICA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgPyB3aW5kb3dcbiAgICA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnXG4gICAgPyBnbG9iYWxcbiAgICA6IHt9O1xuIiwgImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFNsb3QgfSBmcm9tICdAcmFkaXgtdWkvcmVhY3Qtc2xvdCc7XG5cbmNvbnN0IE5PREVTID0gW1xuICAnYScsXG4gICdidXR0b24nLFxuICAnZGl2JyxcbiAgJ2gyJyxcbiAgJ2gzJyxcbiAgJ2ltZycsXG4gICdsaScsXG4gICduYXYnLFxuICAncCcsXG4gICdzcGFuJyxcbiAgJ3N2ZycsXG4gICd1bCcsXG5dIGFzIGNvbnN0O1xuXG4vLyBUZW1wb3Jhcnkgd2hpbGUgd2UgYXdhaXQgbWVyZ2Ugb2YgdGhpcyBmaXg6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vRGVmaW5pdGVseVR5cGVkL0RlZmluaXRlbHlUeXBlZC9wdWxsLzU1Mzk2XG4vLyBwcmV0dGllci1pZ25vcmVcbnR5cGUgUHJvcHNXaXRob3V0UmVmPFA+ID0gUCBleHRlbmRzIGFueSA/ICgncmVmJyBleHRlbmRzIGtleW9mIFAgPyBQaWNrPFAsIEV4Y2x1ZGU8a2V5b2YgUCwgJ3JlZic+PiA6IFApIDogUDtcbnR5cGUgQ29tcG9uZW50UHJvcHNXaXRob3V0UmVmPFQgZXh0ZW5kcyBSZWFjdC5FbGVtZW50VHlwZT4gPSBQcm9wc1dpdGhvdXRSZWY8XG4gIFJlYWN0LkNvbXBvbmVudFByb3BzPFQ+XG4+O1xuXG50eXBlIFByaW1pdGl2ZXMgPSB7IFtFIGluIHR5cGVvZiBOT0RFU1tudW1iZXJdXTogUHJpbWl0aXZlRm9yd2FyZFJlZkNvbXBvbmVudDxFPiB9O1xudHlwZSBQcmltaXRpdmVQcm9wc1dpdGhSZWY8RSBleHRlbmRzIFJlYWN0LkVsZW1lbnRUeXBlPiA9IFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aFJlZjxFPiAmIHtcbiAgYXNDaGlsZD86IGJvb2xlYW47XG59O1xuXG5pbnRlcmZhY2UgUHJpbWl0aXZlRm9yd2FyZFJlZkNvbXBvbmVudDxFIGV4dGVuZHMgUmVhY3QuRWxlbWVudFR5cGU+XG4gIGV4dGVuZHMgUmVhY3QuRm9yd2FyZFJlZkV4b3RpY0NvbXBvbmVudDxQcmltaXRpdmVQcm9wc1dpdGhSZWY8RT4+IHt9XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFByaW1pdGl2ZVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5jb25zdCBQcmltaXRpdmUgPSBOT0RFUy5yZWR1Y2UoXG4gIChwcmltaXRpdmUsIG5vZGUpID0+ICh7XG4gICAgLi4ucHJpbWl0aXZlLFxuICAgIFtub2RlXTogUmVhY3QuZm9yd2FyZFJlZigocHJvcHM6IFByaW1pdGl2ZVByb3BzV2l0aFJlZjx0eXBlb2Ygbm9kZT4sIGZvcndhcmRlZFJlZjogYW55KSA9PiB7XG4gICAgICBjb25zdCB7IGFzQ2hpbGQsIC4uLnByaW1pdGl2ZVByb3BzIH0gPSBwcm9wcztcbiAgICAgIGNvbnN0IENvbXA6IGFueSA9IGFzQ2hpbGQgPyBTbG90IDogbm9kZTtcblxuICAgICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgKHdpbmRvdyBhcyBhbnkpW1N5bWJvbC5mb3IoJ3JhZGl4LXVpJyldID0gdHJ1ZTtcbiAgICAgIH0sIFtdKTtcblxuICAgICAgaWYgKChwcm9wcyBhcyBhbnkpLmFzKSBjb25zb2xlLmVycm9yKEFTX0VSUk9SKTtcbiAgICAgIHJldHVybiA8Q29tcCB7Li4ucHJpbWl0aXZlUHJvcHN9IHJlZj17Zm9yd2FyZGVkUmVmfSAvPjtcbiAgICB9KSxcbiAgfSksXG4gIHt9IGFzIFByaW1pdGl2ZXNcbik7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuY29uc3QgQVNfRVJST1IgPSBgV2FybmluZzogVGhlIFxcYGFzXFxgIHByb3AgaGFzIGJlZW4gcmVtb3ZlZCBpbiBmYXZvdXIgb2YgXFxgYXNDaGlsZFxcYC4gRm9yIGRldGFpbHMsIHNlZSBodHRwczovL3JhZGl4LXVpLmNvbS9kb2NzL3ByaW1pdGl2ZXMvb3ZlcnZpZXcvc3R5bGluZyNjaGFuZ2luZy10aGUtcmVuZGVyZWQtZWxlbWVudGA7XG5cbmNvbnN0IFJvb3QgPSBQcmltaXRpdmU7XG5cbmV4cG9ydCB7XG4gIFByaW1pdGl2ZSxcbiAgLy9cbiAgUm9vdCxcbn07XG5leHBvcnQgdHlwZSB7IENvbXBvbmVudFByb3BzV2l0aG91dFJlZiwgUHJpbWl0aXZlUHJvcHNXaXRoUmVmIH07XG4iLCAiZnVuY3Rpb24gJHBhcmNlbCRpbnRlcm9wRGVmYXVsdChhKSB7XG4gIHJldHVybiBhICYmIGEuX19lc01vZHVsZSA/IGEuZGVmYXVsdCA6IGE7XG59XG5cbmZ1bmN0aW9uICRwYXJjZWwkZGVmaW5lSW50ZXJvcEZsYWcoYSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYSwgJ19fZXNNb2R1bGUnLCB7dmFsdWU6IHRydWV9KTtcbn1cblxuZnVuY3Rpb24gJHBhcmNlbCRyZWV4cG9ydChlLCBuLCB2KSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBuLCB7Z2V0OiB2LCBlbnVtZXJhYmxlOiB0cnVlfSk7XG59XG5cbmZ1bmN0aW9uICRwYXJjZWwkZXhwb3J0V2lsZGNhcmQoZGVzdCwgc291cmNlKSB7XG4gIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoa2V5ID09PSAnZGVmYXVsdCcgfHwga2V5ID09PSAnX19lc01vZHVsZScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGVzdCwga2V5LCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2Vba2V5XTtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiBkZXN0O1xufVxuXG5mdW5jdGlvbiAkcGFyY2VsJG1pc3NpbmdNb2R1bGUobmFtZSkge1xuICB2YXIgZXJyID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIG5hbWUgKyBcIidcIik7XG4gIGVyci5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuICB0aHJvdyBlcnI7XG59XG5cbnZhciAkcGFyY2VsJGdsb2JhbCA9XG4gIHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJ1xuICAgID8gZ2xvYmFsVGhpc1xuICAgIDogdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnXG4gICAgPyBzZWxmXG4gICAgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICAgID8gd2luZG93XG4gICAgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJ1xuICAgID8gZ2xvYmFsXG4gICAgOiB7fTtcbiIsICJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSAnQHJhZGl4LXVpL3JlYWN0LWNvbnRleHQnO1xuaW1wb3J0IHsgdXNlQ29tcG9zZWRSZWZzIH0gZnJvbSAnQHJhZGl4LXVpL3JlYWN0LWNvbXBvc2UtcmVmcyc7XG5pbXBvcnQgeyBQcmltaXRpdmUgfSBmcm9tICdAcmFkaXgtdWkvcmVhY3QtcHJpbWl0aXZlJztcbmltcG9ydCB7IHVzZUlkIH0gZnJvbSAnQHJhZGl4LXVpL3JlYWN0LWlkJztcblxuaW1wb3J0IHR5cGUgKiBhcyBSYWRpeCBmcm9tICdAcmFkaXgtdWkvcmVhY3QtcHJpbWl0aXZlJztcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogTGFiZWxcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuY29uc3QgTkFNRSA9ICdMYWJlbCc7XG5cbnR5cGUgTGFiZWxDb250ZXh0VmFsdWUgPSB7IGlkPzogc3RyaW5nOyBjb250cm9sUmVmOiBSZWFjdC5NdXRhYmxlUmVmT2JqZWN0PEhUTUxFbGVtZW50IHwgbnVsbD4gfTtcbmNvbnN0IFtMYWJlbFByb3ZpZGVyLCB1c2VMYWJlbENvbnRleHRJbXBsXSA9IGNyZWF0ZUNvbnRleHQ8TGFiZWxDb250ZXh0VmFsdWU+KE5BTUUsIHtcbiAgaWQ6IHVuZGVmaW5lZCxcbiAgY29udHJvbFJlZjogeyBjdXJyZW50OiBudWxsIH0sXG59KTtcblxudHlwZSBMYWJlbEVsZW1lbnQgPSBSZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBQcmltaXRpdmUuc3Bhbj47XG50eXBlIFByaW1pdGl2ZVNwYW5Qcm9wcyA9IFJhZGl4LkNvbXBvbmVudFByb3BzV2l0aG91dFJlZjx0eXBlb2YgUHJpbWl0aXZlLnNwYW4+O1xuaW50ZXJmYWNlIExhYmVsUHJvcHMgZXh0ZW5kcyBQcmltaXRpdmVTcGFuUHJvcHMge1xuICBodG1sRm9yPzogc3RyaW5nO1xufVxuXG5jb25zdCBMYWJlbCA9IFJlYWN0LmZvcndhcmRSZWY8TGFiZWxFbGVtZW50LCBMYWJlbFByb3BzPigocHJvcHMsIGZvcndhcmRlZFJlZikgPT4ge1xuICBjb25zdCB7IGh0bWxGb3IsIGlkOiBpZFByb3AsIC4uLmxhYmVsUHJvcHMgfSA9IHByb3BzO1xuICBjb25zdCBjb250cm9sUmVmID0gUmVhY3QudXNlUmVmPEhUTUxFbGVtZW50IHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IHJlZiA9IFJlYWN0LnVzZVJlZjxIVE1MU3BhbkVsZW1lbnQ+KG51bGwpO1xuICBjb25zdCBjb21wb3NlZFJlZnMgPSB1c2VDb21wb3NlZFJlZnMoZm9yd2FyZGVkUmVmLCByZWYpO1xuICBjb25zdCBpZCA9IHVzZUlkKGlkUHJvcCk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoaHRtbEZvcikge1xuICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGh0bWxGb3IpO1xuICAgICAgY29uc3QgbGFiZWwgPSByZWYuY3VycmVudDtcbiAgICAgIGlmIChsYWJlbCAmJiBlbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IGdldEFyaWFMYWJlbCA9ICgpID0+IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsbGVkYnknKTtcbiAgICAgICAgY29uc3QgYXJpYUxhYmVsbGVkQnkgPSBbZ2V0QXJpYUxhYmVsKCksIGlkXS5maWx0ZXIoQm9vbGVhbikuam9pbignICcpO1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbGxlZGJ5JywgYXJpYUxhYmVsbGVkQnkpO1xuICAgICAgICBjb250cm9sUmVmLmN1cnJlbnQgPSBlbGVtZW50O1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIFdlIGdldCB0aGUgbGF0ZXN0IGF0dHJpYnV0ZSB2YWx1ZSBiZWNhdXNlIGF0IHRoZSB0aW1lIHRoYXQgdGhpcyBjbGVhbnVwIGZpcmVzLFxuICAgICAgICAgICAqIHRoZSB2YWx1ZXMgZnJvbSB0aGUgY2xvc3VyZSBtYXkgaGF2ZSBjaGFuZ2VkLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGNvbnN0IGFyaWFMYWJlbGxlZEJ5ID0gZ2V0QXJpYUxhYmVsKCk/LnJlcGxhY2UoaWQsICcnKTtcbiAgICAgICAgICBpZiAoYXJpYUxhYmVsbGVkQnkgPT09ICcnKSB7XG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1sYWJlbGxlZGJ5Jyk7XG4gICAgICAgICAgfSBlbHNlIGlmIChhcmlhTGFiZWxsZWRCeSkge1xuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWxsZWRieScsIGFyaWFMYWJlbGxlZEJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICB9LCBbaWQsIGh0bWxGb3JdKTtcblxuICByZXR1cm4gKFxuICAgIDxMYWJlbFByb3ZpZGVyIGlkPXtpZH0gY29udHJvbFJlZj17Y29udHJvbFJlZn0+XG4gICAgICA8UHJpbWl0aXZlLnNwYW5cbiAgICAgICAgcm9sZT1cImxhYmVsXCJcbiAgICAgICAgaWQ9e2lkfVxuICAgICAgICB7Li4ubGFiZWxQcm9wc31cbiAgICAgICAgcmVmPXtjb21wb3NlZFJlZnN9XG4gICAgICAgIG9uTW91c2VEb3duPXsoZXZlbnQpID0+IHtcbiAgICAgICAgICBwcm9wcy5vbk1vdXNlRG93bj8uKGV2ZW50KTtcbiAgICAgICAgICAvLyBwcmV2ZW50IHRleHQgc2VsZWN0aW9uIHdoZW4gZG91YmxlIGNsaWNraW5nIGxhYmVsXG4gICAgICAgICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkICYmIGV2ZW50LmRldGFpbCA+IDEpIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH19XG4gICAgICAgIG9uQ2xpY2s9eyhldmVudCkgPT4ge1xuICAgICAgICAgIHByb3BzLm9uQ2xpY2s/LihldmVudCk7XG4gICAgICAgICAgaWYgKCFjb250cm9sUmVmLmN1cnJlbnQgfHwgZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuO1xuICAgICAgICAgIGNvbnN0IGlzQ2xpY2tpbmdDb250cm9sID0gY29udHJvbFJlZi5jdXJyZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldCBhcyBOb2RlKTtcbiAgICAgICAgICAvLyBFbnN1cmUgZXZlbnQgd2FzIGdlbmVyYXRlZCBieSBhIHVzZXIgYWN0aW9uXG4gICAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0V2ZW50L2lzVHJ1c3RlZFxuICAgICAgICAgIGNvbnN0IGlzVXNlckNsaWNrID0gZXZlbnQuaXNUcnVzdGVkID09PSB0cnVlO1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIFdoZW4gYSBsYWJlbCBpcyB3cmFwcGVkIGFyb3VuZCB0aGUgY29udHJvbCBpdCBsYWJlbHMsIHdlIHRyaWdnZXIgdGhlIGFwcHJvcHJpYXRlIGV2ZW50c1xuICAgICAgICAgICAqIG9uIHRoZSBjb250cm9sIHdoZW4gdGhlIGxhYmVsIGlzIGNsaWNrZWQuIFdlIGRvIG5vdGhpbmcgaWYgdGhlIHVzZXIgaXMgYWxyZWFkeSBjbGlja2luZyB0aGVcbiAgICAgICAgICAgKiBjb250cm9sIGluc2lkZSB0aGUgbGFiZWwuXG4gICAgICAgICAgICovXG4gICAgICAgICAgaWYgKCFpc0NsaWNraW5nQ29udHJvbCAmJiBpc1VzZXJDbGljaykge1xuICAgICAgICAgICAgY29udHJvbFJlZi5jdXJyZW50LmNsaWNrKCk7XG4gICAgICAgICAgICBjb250cm9sUmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH19XG4gICAgICAvPlxuICAgIDwvTGFiZWxQcm92aWRlcj5cbiAgKTtcbn0pO1xuXG5MYWJlbC5kaXNwbGF5TmFtZSA9IE5BTUU7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuY29uc3QgdXNlTGFiZWxDb250ZXh0ID0gKGVsZW1lbnQ/OiBIVE1MRWxlbWVudCB8IG51bGwpID0+IHtcbiAgY29uc3QgY29udGV4dCA9IHVzZUxhYmVsQ29udGV4dEltcGwoJ0xhYmVsQ29uc3VtZXInKTtcbiAgY29uc3QgeyBjb250cm9sUmVmIH0gPSBjb250ZXh0O1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGVsZW1lbnQpIGNvbnRyb2xSZWYuY3VycmVudCA9IGVsZW1lbnQ7XG4gIH0sIFtlbGVtZW50LCBjb250cm9sUmVmXSk7XG5cbiAgcmV0dXJuIGNvbnRleHQuaWQ7XG59O1xuXG5jb25zdCBSb290ID0gTGFiZWw7XG5cbmV4cG9ydCB7XG4gIExhYmVsLFxuICAvL1xuICBSb290LFxuICAvL1xuICB1c2VMYWJlbENvbnRleHQsXG59O1xuZXhwb3J0IHR5cGUgeyBMYWJlbFByb3BzIH07XG4iLCAiZXhwb3J0ICogZnJvbSAnLi9zcmMnO1xuIiwgImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB0eXBlIHsgVGV4dGFyZWFBdXRvc2l6ZVByb3BzIH0gZnJvbSAncmVhY3QtdGV4dGFyZWEtYXV0b3NpemUnO1xuXG5pbXBvcnQgeyBXcmFwcGVyLCBMYWJlbCwgVGV4dEFyZWFJbnB1dCwgTWVzc2FnZSwgRXJyb3IgfSBmcm9tICcuL3N0eWxlcyc7XG5cbmV4cG9ydCB0eXBlIFRleHRhcmVhUHJvcHMgPSB7XG4gIC8qKlxuICAgKlxuICAgKi9cbiAgbGFiZWw/OiBzdHJpbmc7XG4gIC8qKlxuICAgKlxuICAgKi9cbiAgaGludD86IHN0cmluZyB8IHN0cmluZ1tdO1xuICAvKipcbiAgICpcbiAgICovXG4gIGVycm9yPzogc3RyaW5nIHwgc3RyaW5nW107XG59ICYgVGV4dGFyZWFBdXRvc2l6ZVByb3BzO1xuXG5leHBvcnQgY29uc3QgVGV4dGFyZWEgPSBSZWFjdC5mb3J3YXJkUmVmPEhUTUxUZXh0QXJlYUVsZW1lbnQsIFRleHRhcmVhUHJvcHM+KFxuICAoeyBsYWJlbCwgaGludCwgbmFtZSwgZXJyb3IsIG1pblJvd3MgPSAzLCAuLi5wcm9wcyB9LCByZWYpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPFdyYXBwZXI+XG4gICAgICAgIHtsYWJlbCAmJiA8TGFiZWwgaHRtbEZvcj17YHRleHRhcmVhLSR7bmFtZX1gfT57bGFiZWx9PC9MYWJlbD59XG5cbiAgICAgICAgPFRleHRBcmVhSW5wdXRcbiAgICAgICAgICByZWY9e3JlZn1cbiAgICAgICAgICBpZD17YHRleHRhcmVhLSR7bmFtZX1gfVxuICAgICAgICAgIG1pblJvd3M9e21pblJvd3N9XG4gICAgICAgICAgaGFzRXJyb3I9eyEhZXJyb3J9XG4gICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAvPlxuXG4gICAgICAgIDxNZXNzYWdlPntoaW50fTwvTWVzc2FnZT5cblxuICAgICAgICA8RXJyb3I+e2Vycm9yfTwvRXJyb3I+XG4gICAgICA8L1dyYXBwZXI+XG4gICAgKTtcbiAgfVxuKTtcbiIsICJpbXBvcnQgc3R5bGVkLCB7IGNzcywgRGVmYXVsdFRoZW1lIH0gZnJvbSAnQG5lb24tZGlzdHJpY3Qvc3lzdGVtJztcblxuaW1wb3J0IFJlc2l6ZVRleHRhcmVhIGZyb20gJ3JlYWN0LXRleHRhcmVhLWF1dG9zaXplJztcblxuaW1wb3J0ICogYXMgTGFiZWxCYXNlIGZyb20gJ0ByYWRpeC11aS9yZWFjdC1sYWJlbCc7XG5cbmltcG9ydCB7IFRleHRhcmVhUHJvcHMgfSBmcm9tICcuJztcblxuZXhwb3J0IGNvbnN0IFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBjb2xvcjogd2hpdGU7XG5gO1xuXG5leHBvcnQgY29uc3QgTGFiZWwgPSBzdHlsZWQoTGFiZWxCYXNlLlJvb3QpYFxuICAkeyh7IHRoZW1lIH0pID0+IGNzc2BcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBtYXJnaW4tYm90dG9tOiA1cHg7XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICBmb250LXdlaWdodDogJHt0aGVtZS5mb250V2VpZ2h0cy5tZWRpdW19O1xuICBgfVxuYDtcblxuY29uc3QgdGV4dEFyZWFJbnB1dFZhcmlhbnRzID0gKHRoZW1lOiBEZWZhdWx0VGhlbWUpID0+ICh7XG4gIGRpc2FibGVkOiBjc3NgXG4gICAgJjpkaXNhYmxlZCB7XG4gICAgICBiYWNrZ3JvdW5kOiAke3RoZW1lLmNvbG9ycy5ncmV5MX07XG4gICAgICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xuICAgIH1cbiAgYCxcbiAgaGFzRXJyb3I6IGNzc2BcbiAgICBiYWNrZ3JvdW5kOiAke3RoZW1lLmNvbG9ycy5yZWQxfTtcbiAgYFxufSk7XG5cbnR5cGUgVGV4dGFyZWFTdHlsZXNQcm9wcyA9IHtcbiAgaGFzRXJyb3I6IGJvb2xlYW47XG59ICYgUGljazxUZXh0YXJlYVByb3BzLCAnY29sb3InIHwgJ2Rpc2FibGVkJyB8ICdlcnJvcic+O1xuXG5leHBvcnQgY29uc3QgVGV4dEFyZWFJbnB1dCA9IHN0eWxlZChSZXNpemVUZXh0YXJlYSk8VGV4dGFyZWFTdHlsZXNQcm9wcz5gXG4gICR7KHsgdGhlbWUsIGRpc2FibGVkLCBlcnJvciB9KSA9PiBjc3NgXG4gICAgd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZzogJHt0aGVtZS5zcGFjZXNbMl19O1xuICAgIGZvbnQtc2l6ZTogJHt0aGVtZS5mb250U2l6ZXMubWR9O1xuICAgIG91dGxpbmU6IG5vbmU7XG4gICAgYmFja2dyb3VuZDogJHt0aGVtZS5jb2xvcnMuYmxhY2t9O1xuICAgIGNvbG9yOiAke3RoZW1lLmNvbG9ycy53aGl0ZX07XG4gICAgYm9yZGVyOiAxcHggc29saWQ7XG4gICAgYm9yZGVyLWNvbG9yOiAke3RoZW1lLmNvbG9ycy5ncmV5M307XG5cbiAgICAmOmhvdmVyIHtcbiAgICAgIGJvcmRlci1jb2xvcjogJHt0aGVtZS5jb2xvcnMucGluazJ9O1xuICAgIH1cblxuICAgICY6Zm9jdXMge1xuICAgICAgYm9yZGVyLWNvbG9yOiAke3RoZW1lLmNvbG9ycy50ZWFsMX07XG4gICAgfVxuXG4gICAgLyogTW9kaWZpZXJzICovXG4gICAgJHtkaXNhYmxlZCAmJiB0ZXh0QXJlYUlucHV0VmFyaWFudHModGhlbWUpLmRpc2FibGVkfVxuICAgICR7ZXJyb3IgJiYgdGV4dEFyZWFJbnB1dFZhcmlhbnRzKHRoZW1lKS5oYXNFcnJvcn1cbiAgYH1cbmA7XG5cbmV4cG9ydCBjb25zdCBNZXNzYWdlID0gc3R5bGVkLnNtYWxsYFxuICAkeyh7IHRoZW1lIH0pID0+IGNzc2BcbiAgICBtYXJnaW4tdG9wOiAke3RoZW1lLnNwYWNlc1sxXX07XG4gICAgY29sb3I6ICR7dGhlbWUuY29sb3JzLmdyZXkxfTtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgYH1cbmA7XG5cbmV4cG9ydCBjb25zdCBFcnJvciA9IHN0eWxlZC5kaXZgXG4gICR7KHsgdGhlbWUgfSkgPT4gY3NzYFxuICAgIGNvbG9yOiAke3RoZW1lLmNvbG9ycy5yZWQxfTtcbiAgYH1cbmA7XG4iXSwKICAibWFwcGluZ3MiOiAiOHJDQUFBLEdBQWEsR0FBYixVQUFPLEFBQU0sRUFDWCxNQUFPLFdBQWEsWUFDaEIsR0FBSyxTQUFRLFFBQVksSUFBSyxRQUFVLFlBQVksS0FDbkQsU0FBUyxlQUFpQixTQUFTLGNBQWMsS0FDbEQsR0FBSSxLQUFJLFVBQVcsU0FBUyxTQUFTLDBCQ1FYLEdBQU0sRUFBQSxFQUFOLEdBQUEsR0FBTSxFQUFBLFFBQUEsU0FDcEMsT0FBTyxLQUFLLEdBQVEsUUFBUSxTQUFTLEVBQUEsQ0FDdkIsQUFBUixJQUFRLFdBQXFCLEFBQVIsSUFBUSxjQUlqQyxPQUFPLGVBQWUsRUFBTSxFQUFLLENBQy9CLFdBQUEsR0FDQSxJQUFLLFVBQUEsQ0FDSCxNQUFPLEdBQU8sUUFLYixHQzZFVCxlQUFpQyxFQUFBLENBQy9CLEdBQU0sR0FBWSxFQUFPLEdBQ3pC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
